# vim: filetype=bash

# Use lf to switch directories and bind it to ctrl-o
lfcd() {
	local tmp="$(mktemp -uq)"
	trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}


# mv an item into a folder that you make, in the same command.
mvmk() {
	mkdir -p -- "$argv[-1]"
	mv "$@"
}

# use fzf to search for dirs and paste them inplace, in the current prompt
fzf_dir() {
    cmd=$(fd . --type d | fzf --preview 'tree -C {} | head -200')
    LBUFFER="${LBUFFER}${(q)cmd}"
    local ret=$?
    zle reset-prompt
    return $ret
}

# export the directory as a widget to use in keybinds
zle -N fzf_dir

# ### #
# git #

gremote() {
	local remote=$(git remote -v | head -n 1)
	if [[ $remote =~ 'https' ]]; then
		local repoUrl=$(echo $remote | awk -F " " '{print $2}' | sed 's/\\.git//g')
	else
		local repoUrl=$(echo $remote | awk -F "@" '{print $2}' | awk -F " " '{print $1}' | sed 's/:/\//g' | sed 's/.git//g' | awk '{print "https://"$1}')
	fi
	echo "Opening $repoUrl"
	open $repoUrl
}

# get gitignore templates
gi() {
	curl -sLw n https://www.toptal.com/developers/gitignore/api/$@
}

# clone a repo, but checkout only a specific directory
# eg git_sparse_clone "github.url" "./local/destination" "dir/to/checkout"
# https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository#13738951
git_sparse_clone() (
	rurl="$1" localdir="$2" && shift 2

	mkdir -p "$localdir"
	cd "$localdir"

	git init
	git remote add -f origin "$rurl"

	git config core.sparseCheckout true

	# Loops over remaining args
	for i; do
		echo "$i" >>.git/info/sparse-checkout
	done

	git pull origin master
)

##############
# tjex files #

# search .scripts folder and executer
scripts() {
	if result=($(fd . -tf -Earchived ${HOME}/.local/scripts | fzf)); then
		$result
	else
		return
	fi
}

tref() {
	if result=($(fd . ${XDG_DATA_HOME}/tref | fzf --preview='bat --color=always --style=numbers {}')); then
		nvim $result
	else
		return
	fi
}

tlogs() {
	if result=($(fd . -tf ${HOME}/docs/logs | fzf)); then
		nvim $result
	else
		return
	fi
}

tn() {
	if result=($(fd . -tf ${HOME}/docs/notes | fzf)); then
		nvim $result
	else
		return
	fi
}

tl() {
	if result=($(fd . -tf ${HOME}/docs/lists | fzf)); then
		nvim $result
	else
		return
	fi

}
